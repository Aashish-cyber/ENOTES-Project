{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ranaa\\\\Downloads\\\\smart-notes-master\\\\smart-notes-master\\\\src\\\\pages\\\\Admin.js\",\n    _s = $RefreshSig$();\n\n// Libraries\nimport React, { useContext } from \"react\";\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\"; // App Context\n\nimport { AppContext } from \"../contexts/AppContext\"; // Material UI Components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button, Container, Divider, Typography } from \"@material-ui/core\"; // Material UI Icons\n\nimport TransitEnterexitIcon from \"@material-ui/icons/TransitEnterexit\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport WarningIcon from \"@material-ui/icons/Warning\";\nimport RestoreIcon from \"@material-ui/icons/Restore\"; // Material UI Colors\n\nimport red from \"@material-ui/core/colors/red\"; // Component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Admin = () => {\n  _s();\n\n  // Get State\n  const state = useContext(AppContext); // Custom CSS Classes Style\n\n  const useStyles = makeStyles(theme => ({\n    icon: {\n      transform: \"rotate(180deg)\"\n    },\n    section: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"flex-start\",\n      marginBottom: 20,\n      \"&:nth-of-type(2)\": {\n        marginTop: 20\n      }\n    },\n    button: {\n      margin: \"20px 0 0\",\n      flexGrow: 0\n    },\n    dangerButton: {\n      margin: \"20px 0 0\",\n      backgroundColor: state.profile.theme === \"light\" ? red[500] : red[400],\n      color: \"#ffffff\",\n      \"&:hover\": {\n        backgroundColor: state.profile.theme === \"light\" ? red[600] : red[500]\n      }\n    }\n  })); // Classes Object\n\n  const classes = useStyles(); // Sweet Alert Library\n\n  const MySwal = withReactContent(Swal); // Handle Export Method\n\n  const handleExport = () => {\n    // Trigger Dialogue With Data\n    MySwal.fire({\n      title: \"Export All Data\",\n      text: \"Copy data shown in the next text field, and save it on your machine. Come back with this data anytime to import & restore it\",\n      input: \"text\",\n      inputValue: state.exportData(),\n      inputAttributes: {\n        \"readonly\": true,\n        \"style\": \"font-size: 14px\"\n      },\n      confirmButtonText: \"Ok, I copied it.\"\n    });\n  }; // Handle Import Method\n\n\n  const handleImport = async () => {\n    // Trigger Dialogue To Get Data\n    const {\n      value: data\n    } = await MySwal.fire({\n      title: \"Import All Data\",\n      text: \"Paste data which you have exported before, to restore it. If application breakdown (due to not correct data) , route to '/admin', then restore every thing\",\n      input: \"text\",\n      inputPlaceholder: \"Paste data here\",\n      inputAttributes: {\n        \"style\": \"font-size: 14px\"\n      },\n      confirmButtonText: \"Restore\",\n      inputValidator: value => {\n        if (!value) {\n          return \"You need to paste data to restore it!\";\n        }\n      }\n    }); // Check If Data Pasted\n\n    if (data) {\n      // Restore Data\n      await state.importData(data); // Success Dialogue\n\n      await MySwal.fire(\"Restored!\", \"Data should be restored now.\", \"success\");\n    }\n  }; // Handle Restore To Defaults Method\n\n\n  const handleRestore = () => {\n    // Trigger Dialogue With Data\n    MySwal.fire({\n      title: \"Restore To Defaults\",\n      text: \"Restore application data to defaults, will remove all notes, categories, & profile data\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#dd3333\",\n      cancelButtonColor: \"#3085d6\",\n      confirmButtonText: \"Yes, Restore\"\n    }).then(async result => {\n      if (result.isConfirmed) {\n        // Restore Data\n        await state.restore(); // Success Dialogue\n\n        await MySwal.fire(\"Restored!\", `Application data restored`, \"success\");\n      }\n    });\n  }; // Handle Clear All Method\n\n\n  const handleClearAll = property => {\n    // Confirmation Dialogue\n    MySwal.fire({\n      title: `Are you sure to delete all ${property}?`,\n      icon: \"error\",\n      showCancelButton: true,\n      confirmButtonColor: \"#dd3333\",\n      cancelButtonColor: \"#3085d6\",\n      confirmButtonText: \"Yes, delete it!\"\n    }).then(result => {\n      if (result.isConfirmed) {\n        // Check For Categories Property\n        if (property === \"categories\") {\n          // Assign All Notes To 'Not Categorized' Category\n          let temp = state.notes.map(note => {\n            // Return Nothing\n            return {\n              id: note.id,\n              title: note.title,\n              body: note.body,\n              category: \"Not Categorized\",\n              favourite: note.favourite\n            };\n          }); // Update All Notes Method\n\n          state.updateAllNotes(temp);\n        } // Clear All Notes\n\n\n        state.clearAll(property); // Success Dialogue\n\n        MySwal.fire(\"Deleted!\", `All ${property} have been deleted`, \"success\");\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.section,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        component: \"h2\",\n        color: \"textSecondary\",\n        children: \"Export & Import Your Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        startIcon: /*#__PURE__*/_jsxDEV(TransitEnterexitIcon, {\n          className: classes.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 22\n        }, this),\n        className: classes.button,\n        onClick: handleExport,\n        size: \"small\",\n        children: \"Export Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        startIcon: /*#__PURE__*/_jsxDEV(TransitEnterexitIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 22\n        }, this),\n        className: classes.button,\n        onClick: handleImport,\n        size: \"small\",\n        children: \"Import Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.section,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        component: \"h2\",\n        color: \"error\",\n        children: \"Danger Zone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        startIcon: /*#__PURE__*/_jsxDEV(ErrorIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 22\n        }, this),\n        className: classes.dangerButton,\n        onClick: () => handleClearAll(\"notes\"),\n        size: \"small\",\n        children: \"Clear All Notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        startIcon: /*#__PURE__*/_jsxDEV(WarningIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 22\n        }, this),\n        className: classes.dangerButton,\n        onClick: () => handleClearAll(\"categories\"),\n        size: \"small\",\n        children: \"Clear All Categories\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        startIcon: /*#__PURE__*/_jsxDEV(RestoreIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 22\n        }, this),\n        className: classes.dangerButton,\n        onClick: handleRestore,\n        size: \"small\",\n        children: \"Restore Defaults\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n}; // Export Component\n\n\n_s(Admin, \"J5Oil7mLKkI+OE+stbdfF7iN8yQ=\", true);\n\n_c = Admin;\nexport default Admin;\n\nvar _c;\n\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"sources":["C:/Users/ranaa/Downloads/smart-notes-master/smart-notes-master/src/pages/Admin.js"],"names":["React","useContext","Swal","withReactContent","AppContext","makeStyles","Button","Container","Divider","Typography","TransitEnterexitIcon","ErrorIcon","WarningIcon","RestoreIcon","red","Admin","state","useStyles","theme","icon","transform","section","display","flexDirection","alignItems","marginBottom","marginTop","button","margin","flexGrow","dangerButton","backgroundColor","profile","color","classes","MySwal","handleExport","fire","title","text","input","inputValue","exportData","inputAttributes","confirmButtonText","handleImport","value","data","inputPlaceholder","inputValidator","importData","handleRestore","showCancelButton","confirmButtonColor","cancelButtonColor","then","result","isConfirmed","restore","handleClearAll","property","temp","notes","map","note","id","body","category","favourite","updateAllNotes","clearAll"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,gBAAP,MAA6B,2BAA7B,C,CAEA;;AACA,SAAQC,UAAR,QAAyB,wBAAzB,C,CAEA;;AACA,SAAQC,UAAR,QAAyB,0BAAzB;AACA,SAAQC,MAAR,EAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,UAApC,QAAqD,mBAArD,C,CAEA;;AACA,OAAOC,oBAAP,MAAiC,qCAAjC;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,WAAP,MAAwB,4BAAxB,C,CAEA;;AACA,OAAOC,GAAP,MAAgB,8BAAhB,C,CAGA;;;;AACA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB;AACA,QAAMC,KAAK,GAAGf,UAAU,CAACG,UAAD,CAAxB,CAFkB,CAIlB;;AACA,QAAMa,SAAS,GAAGZ,UAAU,CAACa,KAAK,KAAK;AACnCC,IAAAA,IAAI,EAAE;AACJC,MAAAA,SAAS,EAAE;AADP,KAD6B;AAInCC,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAE,MADF;AAEPC,MAAAA,aAAa,EAAE,QAFR;AAGPC,MAAAA,UAAU,EAAE,YAHL;AAIPC,MAAAA,YAAY,EAAE,EAJP;AAKP,0BAAoB;AAClBC,QAAAA,SAAS,EAAE;AADO;AALb,KAJ0B;AAanCC,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAE,UADF;AAENC,MAAAA,QAAQ,EAAE;AAFJ,KAb2B;AAiBnCC,IAAAA,YAAY,EAAE;AACZF,MAAAA,MAAM,EAAE,UADI;AAEZG,MAAAA,eAAe,EAAEf,KAAK,CAACgB,OAAN,CAAcd,KAAd,KAAwB,OAAxB,GAAkCJ,GAAG,CAAC,GAAD,CAArC,GAA6CA,GAAG,CAAC,GAAD,CAFrD;AAGZmB,MAAAA,KAAK,EAAE,SAHK;AAIZ,iBAAW;AACTF,QAAAA,eAAe,EAAEf,KAAK,CAACgB,OAAN,CAAcd,KAAd,KAAwB,OAAxB,GAAkCJ,GAAG,CAAC,GAAD,CAArC,GAA6CA,GAAG,CAAC,GAAD;AADxD;AAJC;AAjBqB,GAAL,CAAN,CAA5B,CALkB,CAiClB;;AACA,QAAMoB,OAAO,GAAGjB,SAAS,EAAzB,CAlCkB,CAoClB;;AACA,QAAMkB,MAAM,GAAGhC,gBAAgB,CAACD,IAAD,CAA/B,CArCkB,CAuClB;;AACA,QAAMkC,YAAY,GAAG,MAAM;AACzB;AACAD,IAAAA,MAAM,CAACE,IAAP,CAAY;AACVC,MAAAA,KAAK,EAAE,iBADG;AAEVC,MAAAA,IAAI,EAAE,8HAFI;AAGVC,MAAAA,KAAK,EAAE,MAHG;AAIVC,MAAAA,UAAU,EAAEzB,KAAK,CAAC0B,UAAN,EAJF;AAKVC,MAAAA,eAAe,EAAE;AACf,oBAAY,IADG;AAEf,iBAAS;AAFM,OALP;AASVC,MAAAA,iBAAiB,EAAE;AATT,KAAZ;AAWD,GAbD,CAxCkB,CAuDlB;;;AACA,QAAMC,YAAY,GAAG,YAAY;AAC/B;AACA,UAAM;AAACC,MAAAA,KAAK,EAAEC;AAAR,QAAgB,MAAMZ,MAAM,CAACE,IAAP,CAAY;AACtCC,MAAAA,KAAK,EAAE,iBAD+B;AAEtCC,MAAAA,IAAI,EAAE,4JAFgC;AAGtCC,MAAAA,KAAK,EAAE,MAH+B;AAItCQ,MAAAA,gBAAgB,EAAE,iBAJoB;AAKtCL,MAAAA,eAAe,EAAE;AACf,iBAAS;AADM,OALqB;AAQtCC,MAAAA,iBAAiB,EAAE,SARmB;AAStCK,MAAAA,cAAc,EAAGH,KAAD,IAAW;AACzB,YAAI,CAACA,KAAL,EAAY;AACV,iBAAO,uCAAP;AACD;AACF;AAbqC,KAAZ,CAA5B,CAF+B,CAkB/B;;AACA,QAAIC,IAAJ,EAAU;AACR;AACA,YAAM/B,KAAK,CAACkC,UAAN,CAAiBH,IAAjB,CAAN,CAFQ,CAGR;;AACA,YAAMZ,MAAM,CAACE,IAAP,CACJ,WADI,EAEJ,8BAFI,EAGJ,SAHI,CAAN;AAKD;AACF,GA7BD,CAxDkB,CAuFlB;;;AACA,QAAMc,aAAa,GAAG,MAAM;AAC1B;AACAhB,IAAAA,MAAM,CAACE,IAAP,CAAY;AACVC,MAAAA,KAAK,EAAE,qBADG;AAEVC,MAAAA,IAAI,EAAE,yFAFI;AAGVpB,MAAAA,IAAI,EAAE,SAHI;AAIViC,MAAAA,gBAAgB,EAAE,IAJR;AAKVC,MAAAA,kBAAkB,EAAE,SALV;AAMVC,MAAAA,iBAAiB,EAAE,SANT;AAOVV,MAAAA,iBAAiB,EAAE;AAPT,KAAZ,EAQGW,IARH,CAQQ,MAAOC,MAAP,IAAkB;AACxB,UAAIA,MAAM,CAACC,WAAX,EAAwB;AACtB;AACA,cAAMzC,KAAK,CAAC0C,OAAN,EAAN,CAFsB,CAGtB;;AACA,cAAMvB,MAAM,CAACE,IAAP,CACJ,WADI,EAEH,2BAFG,EAGJ,SAHI,CAAN;AAKD;AACF,KAnBD;AAoBD,GAtBD,CAxFkB,CAgHlB;;;AACA,QAAMsB,cAAc,GAAIC,QAAD,IAAc;AACnC;AACAzB,IAAAA,MAAM,CAACE,IAAP,CAAY;AACVC,MAAAA,KAAK,EAAG,8BAA6BsB,QAAS,GADpC;AAEVzC,MAAAA,IAAI,EAAE,OAFI;AAGViC,MAAAA,gBAAgB,EAAE,IAHR;AAIVC,MAAAA,kBAAkB,EAAE,SAJV;AAKVC,MAAAA,iBAAiB,EAAE,SALT;AAMVV,MAAAA,iBAAiB,EAAE;AANT,KAAZ,EAOGW,IAPH,CAOSC,MAAD,IAAY;AAClB,UAAIA,MAAM,CAACC,WAAX,EAAwB;AACtB;AACA,YAAIG,QAAQ,KAAK,YAAjB,EAA+B;AAC7B;AACA,cAAIC,IAAI,GAAG7C,KAAK,CAAC8C,KAAN,CAAYC,GAAZ,CAAgBC,IAAI,IAAI;AACjC;AACA,mBAAO;AACLC,cAAAA,EAAE,EAAED,IAAI,CAACC,EADJ;AAEL3B,cAAAA,KAAK,EAAE0B,IAAI,CAAC1B,KAFP;AAGL4B,cAAAA,IAAI,EAAEF,IAAI,CAACE,IAHN;AAILC,cAAAA,QAAQ,EAAE,iBAJL;AAKLC,cAAAA,SAAS,EAAEJ,IAAI,CAACI;AALX,aAAP;AAOD,WATU,CAAX,CAF6B,CAY7B;;AACApD,UAAAA,KAAK,CAACqD,cAAN,CAAqBR,IAArB;AACD,SAhBqB,CAiBtB;;;AACA7C,QAAAA,KAAK,CAACsD,QAAN,CAAeV,QAAf,EAlBsB,CAmBtB;;AACAzB,QAAAA,MAAM,CAACE,IAAP,CACE,UADF,EAEG,OAAMuB,QAAS,oBAFlB,EAGE,SAHF;AAKD;AACF,KAlCD;AAmCD,GArCD;;AAuCA,sBACE,QAAC,SAAD;AAAA,4BACE;AAAK,MAAA,SAAS,EAAE1B,OAAO,CAACb,OAAxB;AAAA,8BACE,QAAC,UAAD;AAAY,QAAA,OAAO,EAAC,IAApB;AAAyB,QAAA,SAAS,EAAC,IAAnC;AAAwC,QAAA,KAAK,EAAC,eAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AACE,QAAA,OAAO,EAAC,WADV;AAEE,QAAA,KAAK,EAAC,SAFR;AAGE,QAAA,SAAS,eAAE,QAAC,oBAAD;AAAsB,UAAA,SAAS,EAAEa,OAAO,CAACf;AAAzC;AAAA;AAAA;AAAA;AAAA,gBAHb;AAIE,QAAA,SAAS,EAAEe,OAAO,CAACP,MAJrB;AAKE,QAAA,OAAO,EAAES,YALX;AAME,QAAA,IAAI,EAAC,OANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAYE,QAAC,MAAD;AACE,QAAA,OAAO,EAAC,WADV;AAEE,QAAA,KAAK,EAAC,SAFR;AAGE,QAAA,SAAS,eAAE,QAAC,oBAAD;AAAA;AAAA;AAAA;AAAA,gBAHb;AAIE,QAAA,SAAS,EAAEF,OAAO,CAACP,MAJrB;AAKE,QAAA,OAAO,EAAEkB,YALX;AAME,QAAA,IAAI,EAAC,OANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAwBE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAxBF,eAyBE;AAAK,MAAA,SAAS,EAAEX,OAAO,CAACb,OAAxB;AAAA,8BACE,QAAC,UAAD;AAAY,QAAA,OAAO,EAAC,IAApB;AAAyB,QAAA,SAAS,EAAC,IAAnC;AAAwC,QAAA,KAAK,EAAC,OAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AACE,QAAA,OAAO,EAAC,WADV;AAEE,QAAA,SAAS,eAAE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,gBAFb;AAGE,QAAA,SAAS,EAAEa,OAAO,CAACJ,YAHrB;AAIE,QAAA,OAAO,EAAE,MAAM6B,cAAc,CAAC,OAAD,CAJ/B;AAKE,QAAA,IAAI,EAAC,OALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAWE,QAAC,MAAD;AACE,QAAA,OAAO,EAAC,WADV;AAEE,QAAA,SAAS,eAAE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,gBAFb;AAGE,QAAA,SAAS,EAAEzB,OAAO,CAACJ,YAHrB;AAIE,QAAA,OAAO,EAAE,MAAM6B,cAAc,CAAC,YAAD,CAJ/B;AAKE,QAAA,IAAI,EAAC,OALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF,eAoBE,QAAC,MAAD;AACE,QAAA,OAAO,EAAC,WADV;AAEE,QAAA,SAAS,eAAE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,gBAFb;AAGE,QAAA,SAAS,EAAEzB,OAAO,CAACJ,YAHrB;AAIE,QAAA,OAAO,EAAEqB,aAJX;AAKE,QAAA,IAAI,EAAC,OALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApBF;AAAA;AAAA;AAAA;AAAA;AAAA,YAzBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2DD,CAnND,C,CAqNA;;;GArNMpC,K;;KAAAA,K;AAsNN,eAAeA,KAAf","sourcesContent":["// Libraries\nimport React, {useContext} from \"react\";\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\n\n// App Context\nimport {AppContext} from \"../contexts/AppContext\";\n\n// Material UI Components\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Button, Container, Divider, Typography} from \"@material-ui/core\";\n\n// Material UI Icons\nimport TransitEnterexitIcon from \"@material-ui/icons/TransitEnterexit\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport WarningIcon from \"@material-ui/icons/Warning\";\nimport RestoreIcon from \"@material-ui/icons/Restore\";\n\n// Material UI Colors\nimport red from \"@material-ui/core/colors/red\";\n\n\n// Component\nconst Admin = () => {\n  // Get State\n  const state = useContext(AppContext);\n\n  // Custom CSS Classes Style\n  const useStyles = makeStyles(theme => ({\n      icon: {\n        transform: \"rotate(180deg)\"\n      },\n      section: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"flex-start\",\n        marginBottom: 20,\n        \"&:nth-of-type(2)\": {\n          marginTop: 20\n        }\n      },\n      button: {\n        margin: \"20px 0 0\",\n        flexGrow: 0\n      },\n      dangerButton: {\n        margin: \"20px 0 0\",\n        backgroundColor: state.profile.theme === \"light\" ? red[500] : red[400],\n        color: \"#ffffff\",\n        \"&:hover\": {\n          backgroundColor: state.profile.theme === \"light\" ? red[600] : red[500]\n        }\n      }\n    }\n  ));\n\n  // Classes Object\n  const classes = useStyles();\n\n  // Sweet Alert Library\n  const MySwal = withReactContent(Swal);\n\n  // Handle Export Method\n  const handleExport = () => {\n    // Trigger Dialogue With Data\n    MySwal.fire({\n      title: \"Export All Data\",\n      text: \"Copy data shown in the next text field, and save it on your machine. Come back with this data anytime to import & restore it\",\n      input: \"text\",\n      inputValue: state.exportData(),\n      inputAttributes: {\n        \"readonly\": true,\n        \"style\": \"font-size: 14px\"\n      },\n      confirmButtonText: \"Ok, I copied it.\"\n    });\n  };\n\n  // Handle Import Method\n  const handleImport = async () => {\n    // Trigger Dialogue To Get Data\n    const {value: data} = await MySwal.fire({\n      title: \"Import All Data\",\n      text: \"Paste data which you have exported before, to restore it. If application breakdown (due to not correct data) , route to '/admin', then restore every thing\",\n      input: \"text\",\n      inputPlaceholder: \"Paste data here\",\n      inputAttributes: {\n        \"style\": \"font-size: 14px\"\n      },\n      confirmButtonText: \"Restore\",\n      inputValidator: (value) => {\n        if (!value) {\n          return \"You need to paste data to restore it!\";\n        }\n      }\n    });\n\n    // Check If Data Pasted\n    if (data) {\n      // Restore Data\n      await state.importData(data);\n      // Success Dialogue\n      await MySwal.fire(\n        \"Restored!\",\n        \"Data should be restored now.\",\n        \"success\"\n      );\n    }\n  };\n\n  // Handle Restore To Defaults Method\n  const handleRestore = () => {\n    // Trigger Dialogue With Data\n    MySwal.fire({\n      title: \"Restore To Defaults\",\n      text: \"Restore application data to defaults, will remove all notes, categories, & profile data\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#dd3333\",\n      cancelButtonColor: \"#3085d6\",\n      confirmButtonText: \"Yes, Restore\"\n    }).then(async (result) => {\n      if (result.isConfirmed) {\n        // Restore Data\n        await state.restore();\n        // Success Dialogue\n        await MySwal.fire(\n          \"Restored!\",\n          `Application data restored`,\n          \"success\"\n        );\n      }\n    });\n  };\n\n  // Handle Clear All Method\n  const handleClearAll = (property) => {\n    // Confirmation Dialogue\n    MySwal.fire({\n      title: `Are you sure to delete all ${property}?`,\n      icon: \"error\",\n      showCancelButton: true,\n      confirmButtonColor: \"#dd3333\",\n      cancelButtonColor: \"#3085d6\",\n      confirmButtonText: \"Yes, delete it!\"\n    }).then((result) => {\n      if (result.isConfirmed) {\n        // Check For Categories Property\n        if (property === \"categories\") {\n          // Assign All Notes To 'Not Categorized' Category\n          let temp = state.notes.map(note => {\n            // Return Nothing\n            return {\n              id: note.id,\n              title: note.title,\n              body: note.body,\n              category: \"Not Categorized\",\n              favourite: note.favourite\n            };\n          });\n          // Update All Notes Method\n          state.updateAllNotes(temp);\n        }\n        // Clear All Notes\n        state.clearAll(property);\n        // Success Dialogue\n        MySwal.fire(\n          \"Deleted!\",\n          `All ${property} have been deleted`,\n          \"success\"\n        );\n      }\n    });\n  };\n\n  return (\n    <Container>\n      <div className={classes.section}>\n        <Typography variant=\"h6\" component=\"h2\" color=\"textSecondary\">Export & Import Your Data</Typography>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          startIcon={<TransitEnterexitIcon className={classes.icon} />}\n          className={classes.button}\n          onClick={handleExport}\n          size=\"small\"\n        >\n          Export Data\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          startIcon={<TransitEnterexitIcon />}\n          className={classes.button}\n          onClick={handleImport}\n          size=\"small\"\n        >\n          Import Data\n        </Button>\n      </div>\n      <Divider />\n      <div className={classes.section}>\n        <Typography variant=\"h6\" component=\"h2\" color=\"error\">Danger Zone</Typography>\n        <Button\n          variant=\"contained\"\n          startIcon={<ErrorIcon />}\n          className={classes.dangerButton}\n          onClick={() => handleClearAll(\"notes\")}\n          size=\"small\"\n        >\n          Clear All Notes\n        </Button>\n        <Button\n          variant=\"contained\"\n          startIcon={<WarningIcon />}\n          className={classes.dangerButton}\n          onClick={() => handleClearAll(\"categories\")}\n          size=\"small\"\n        >\n          Clear All Categories\n        </Button>\n        <Button\n          variant=\"contained\"\n          startIcon={<RestoreIcon />}\n          className={classes.dangerButton}\n          onClick={handleRestore}\n          size=\"small\"\n        >\n          Restore Defaults\n        </Button>\n      </div>\n    </Container>\n  );\n\n};\n\n// Export Component\nexport default Admin;\n"]},"metadata":{},"sourceType":"module"}