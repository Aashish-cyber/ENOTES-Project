{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ranaa\\\\Downloads\\\\smart-notes-master\\\\smart-notes-master\\\\src\\\\pages\\\\ReadNotes.js\",\n    _s = $RefreshSig$();\n\n// Libraries\nimport React, { useContext, useState } from \"react\";\nimport Masonry from \"react-masonry-css\"; // Components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Container, Typography } from \"@material-ui/core\";\nimport NoteCard from \"../components/NoteCard\"; // App Context\n\nimport { AppContext } from \"../contexts/AppContext\"; // Component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReadNotes = () => {\n  _s();\n\n  // Get State\n  const state = useContext(AppContext); // Custom CSS Classes Style\n\n  const useStyle = makeStyles({\n    masonry_grid: {\n      display: \"flex\",\n      marginLeft: \"-30px\",\n      width: \"auto\"\n    },\n    masonry_grid_column: {\n      paddingLeft: 30,\n      backgroundClip: \"padding-box\",\n      \"& > div\": {\n        marginBottom: 30\n      },\n      \"& .MuiCardHeader-content > span:nth-of-type(2)\": {\n        textTransform: \"capitalize\",\n        display: \"inline-block\",\n        padding: \"2px 5px 1px\",\n        fontSize: 11,\n        borderRadius: 4,\n        marginTop: 5\n      }\n    },\n    EmptyMessage: {\n      textAlign: \"center\",\n      color: state.profile.theme === 'light' ? \"#c1c1c1\" : \"#606060\",\n      marginTop: \"calc((100vh - 65px) / 2)\",\n      transform: \"translateY(-50%)\"\n    }\n  }); // Classes Object\n\n  const classes = useStyle(); // Component Local State\n\n  const [empty, setEmpty] = useState(true); // Masonry CSS Breakpoints\n\n  const breakpoints = {\n    default: 3,\n    1200: 2,\n    992: 1\n  }; // Component View\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Masonry, {\n      breakpointCols: breakpoints,\n      className: classes.masonry_grid,\n      columnClassName: classes.masonry_grid_column,\n      children: state.notes.map(note => {\n        // Check If There Are Notes\n        if (note.title) {\n          // Check For Empty If True\n          if (empty === true) {\n            // Change Empty State\n            setEmpty(false);\n          }\n\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(NoteCard, {\n              note: note\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 19\n            }, this)\n          }, note.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }, this);\n        } else {\n          // Return Nothing\n          return null;\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), // Check If Empty Still True, To Show Empty Message\n    empty === true ? /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      component: \"h2\",\n      className: classes.EmptyMessage,\n      children: \"There Are No Notes Yet. Add Some !!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 27\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}; // Export Component\n\n\n_s(ReadNotes, \"1boLzphzAVElufPsffAlvqMtM6U=\", true);\n\n_c = ReadNotes;\nexport default ReadNotes;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadNotes\");","map":{"version":3,"sources":["C:/Users/ranaa/Downloads/smart-notes-master/smart-notes-master/src/pages/ReadNotes.js"],"names":["React","useContext","useState","Masonry","makeStyles","Container","Typography","NoteCard","AppContext","ReadNotes","state","useStyle","masonry_grid","display","marginLeft","width","masonry_grid_column","paddingLeft","backgroundClip","marginBottom","textTransform","padding","fontSize","borderRadius","marginTop","EmptyMessage","textAlign","color","profile","theme","transform","classes","empty","setEmpty","breakpoints","default","notes","map","note","title","id"],"mappings":"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","sourcesContent":["// Libraries\nimport React, {useContext, useState} from \"react\";\nimport Masonry from \"react-masonry-css\";\n\n// Components\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Container, Typography} from \"@material-ui/core\";\nimport NoteCard from \"../components/NoteCard\";\n\n// App Context\nimport {AppContext} from \"../contexts/AppContext\";\n\n// Component\nconst ReadNotes = () => {\n  // Get State\n  const state = useContext(AppContext);\n\n  // Custom CSS Classes Style\n  const useStyle = makeStyles({\n    masonry_grid: {\n      display: \"flex\",\n      marginLeft: \"-30px\",\n      width: \"auto\"\n    },\n    masonry_grid_column: {\n      paddingLeft: 30,\n      backgroundClip: \"padding-box\",\n      \"& > div\": {\n        marginBottom: 30\n      },\n      \"& .MuiCardHeader-content > span:nth-of-type(2)\": {\n        textTransform: \"capitalize\",\n        display: \"inline-block\",\n        padding: \"2px 5px 1px\",\n        fontSize: 11,\n        borderRadius: 4,\n        marginTop: 5\n      }\n    },\n    EmptyMessage: {\n      textAlign: \"center\",\n      color: state.profile.theme === 'light' ? \"#c1c1c1\" : \"#606060\",\n      marginTop: \"calc((100vh - 65px) / 2)\",\n      transform: \"translateY(-50%)\"\n    }\n  });\n\n  // Classes Object\n  const classes = useStyle();\n\n  // Component Local State\n  const [empty, setEmpty] = useState(true)\n\n  // Masonry CSS Breakpoints\n  const breakpoints = {\n    default: 3,\n    1200: 2,\n    992: 1\n  };\n\n  // Component View\n  return (\n    <Container>\n      <Masonry\n        breakpointCols={breakpoints}\n        className={classes.masonry_grid}\n        columnClassName={classes.masonry_grid_column}\n      >\n        {\n          state.notes.map(note => {\n            // Check If There Are Notes\n            if (note.title) {\n              // Check For Empty If True\n              if (empty === true) {\n                // Change Empty State\n                setEmpty(false);\n              }\n              return (\n                <div key={note.id}>\n                  <NoteCard note={note} />\n                </div>\n              );\n            } else {\n              // Return Nothing\n              return null;\n            }\n          })\n        }\n      </Masonry>\n      {\n        // Check If Empty Still True, To Show Empty Message\n        empty === true ? (<Typography variant=\"h5\"\n                                            component=\"h2\"\n                                            className={classes.EmptyMessage}>There Are No Notes Yet. Add Some !!</Typography>) : null\n      }\n    </Container>\n  );\n};\n\n// Export Component\nexport default ReadNotes;\n"]},"metadata":{},"sourceType":"module"}