{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ranaa\\\\Downloads\\\\smart-notes-master\\\\smart-notes-master\\\\src\\\\pages\\\\CreateNote.js\",\n    _s = $RefreshSig$();\n\n// Libraries\nimport React, { useContext, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\"; // App Context\n\nimport { AppContext } from \"../contexts/AppContext\"; // Material UI Components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button, Container, FormControl, FormLabel, IconButton, MenuItem, Select, Slide, TextField } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\"; // Material UI Icons\n\nimport KeyboardArrowRightIcon from \"@material-ui/icons/KeyboardArrowRight\";\nimport CloseIcon from \"@material-ui/icons/Close\"; // Component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CreateNote = () => {\n  _s();\n\n  // Get State\n  const state = useContext(AppContext); // Component Local State\n\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [titleErrorState, setTitleErrorState] = useState(false);\n  const [bodyErrorState, setBodyErrorState] = useState(false);\n  const [category, setCategory] = useState(\"Not Categorized\");\n  const [openAlert, setOpenAlert] = useState(false);\n  const [alertState, setAlertState] = useState(\"\");\n  const [alertMessage, setAlertMessage] = useState(\"\"); // Custom CSS Classes Style\n\n  const useStyles = makeStyles(theme => ({\n    field: {\n      marginTop: 20,\n      marginBottom: 20,\n      display: \"block\"\n    },\n    select: {\n      marginTop: 20,\n      marginBottom: 20\n    },\n    alertContainer: {\n      width: \"100%\",\n      \"& > * + *\": {\n        marginTop: theme.spacing(2)\n      }\n    },\n    alert: {\n      maxWidth: \"300px\",\n      position: \"absolute\",\n      top: 75,\n      right: 20,\n      backgroundColor: state.profile.theme === 'dark' ? alertState === 'success' ? '#495d49' : '#563a38' : ''\n    }\n  })); // Classes Object\n\n  const classes = useStyles(); // Handle Submit Form Method\n\n  const handleSubmit = e => {\n    // Prevent Default Action For Form Submission\n    e.preventDefault(); // Reset Error State\n\n    setTitleErrorState(false);\n    setBodyErrorState(false); // Check If Title Field Empty\n\n    if (title === \"\") {\n      // Set Title Error For Empty\n      setTitleErrorState(true);\n    } // Check If Note Field Empty\n\n\n    if (body === \"\") {\n      // Set Note Error For Empty\n      setBodyErrorState(true);\n    } // Check For Alert Errors\n\n\n    if (title === \"\" || body === \"\") {\n      // Trigger Error Alert\n      triggerAlert(\"error\", \"All Fields Are Required\");\n    } else {\n      // Trigger Success Alert\n      triggerAlert(\"success\", \"Note Saved Successfully\"); // Save Note To State\n\n      state.add(\"notes\", {\n        id: uuidv4(),\n        title: title.trim(),\n        body: body.trim(),\n        category: category,\n        favourite: false\n      }); // Empty Fields\n\n      setBody(\"\");\n      setTitle(\"\");\n    }\n  }; // Trigger Alert Method\n\n\n  const triggerAlert = (state, message) => {\n    // Set Alert State\n    setAlertState(state); // Set Alert Message\n\n    setAlertMessage(message); // Open Alert\n\n    setOpenAlert(true);\n  }; // Component View\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      noValidate: true,\n      autoComplete: \"off\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        className: classes.field,\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          color: \"primary\",\n          children: \"Note Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: e => setTitle(e.target.value),\n          value: title,\n          className: classes.field,\n          label: \"Note Title\",\n          color: \"primary\",\n          variant: \"outlined\",\n          fullWidth: true,\n          required: true,\n          error: titleErrorState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: e => setBody(e.target.value),\n          value: body,\n          className: classes.field,\n          label: \"Note Body\",\n          variant: \"outlined\",\n          color: \"primary\",\n          multiline: true,\n          rows: 5,\n          fullWidth: true,\n          required: true,\n          error: bodyErrorState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        className: classes.field,\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          color: \"primary\",\n          children: \"Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          fullWidth: true,\n          value: category,\n          onChange: e => setCategory(e.target.value),\n          variant: \"outlined\",\n          className: classes.select,\n          children: state.categories.map(category => {\n            return /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: category.name,\n              children: category.name\n            }, category.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        endIcon: /*#__PURE__*/_jsxDEV(KeyboardArrowRightIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 20\n        }, this),\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Slide, {\n      direction: \"left\",\n      in: openAlert,\n      mountOnEnter: true,\n      unmountOnExit: true,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        className: classes.alert,\n        severity: alertState,\n        action: /*#__PURE__*/_jsxDEV(IconButton, {\n          \"aria-label\": \"close\",\n          color: \"inherit\",\n          size: \"small\",\n          onClick: () => setOpenAlert(false),\n          children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n            fontSize: \"inherit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this),\n        children: alertMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CreateNote, \"Jtm6XLl/vtY2H1uT7Ho0LqkGWq4=\", true);\n\n_c = CreateNote;\nexport default CreateNote;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateNote\");","map":{"version":3,"sources":["C:/Users/ranaa/Downloads/smart-notes-master/smart-notes-master/src/pages/CreateNote.js"],"names":["React","useContext","useState","v4","uuidv4","AppContext","makeStyles","Button","Container","FormControl","FormLabel","IconButton","MenuItem","Select","Slide","TextField","Alert","KeyboardArrowRightIcon","CloseIcon","CreateNote","state","title","setTitle","body","setBody","titleErrorState","setTitleErrorState","bodyErrorState","setBodyErrorState","category","setCategory","openAlert","setOpenAlert","alertState","setAlertState","alertMessage","setAlertMessage","useStyles","theme","field","marginTop","marginBottom","display","select","alertContainer","width","spacing","alert","maxWidth","position","top","right","backgroundColor","profile","classes","handleSubmit","e","preventDefault","triggerAlert","add","id","trim","favourite","message","target","value","categories","map","name"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,SAAQC,EAAE,IAAIC,MAAd,QAA2B,MAA3B,C,CAEA;;AACA,SAAQC,UAAR,QAAyB,wBAAzB,C,CAEA;;AACA,SAAQC,UAAR,QAAyB,0BAAzB;AACA,SACEC,MADF,EAEEC,SAFF,EAGEC,WAHF,EAIEC,SAJF,EAKEC,UALF,EAMEC,QANF,EAOEC,MAPF,EAQEC,KARF,EASEC,SATF,QAUO,mBAVP;AAWA,SAAQC,KAAR,QAAoB,kBAApB,C,CAEA;;AACA,OAAOC,sBAAP,MAAmC,uCAAnC;AACA,OAAOC,SAAP,MAAsB,0BAAtB,C,CAEA;;;;AACA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACvB;AACA,QAAMC,KAAK,GAAGnB,UAAU,CAACI,UAAD,CAAxB,CAFuB,CAIvB;;AACA,QAAM,CAACgB,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACqB,IAAD,EAAOC,OAAP,IAAkBtB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACuB,eAAD,EAAkBC,kBAAlB,IAAwCxB,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACyB,cAAD,EAAiBC,iBAAjB,IAAsC1B,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAAC2B,QAAD,EAAWC,WAAX,IAA0B5B,QAAQ,CAAC,iBAAD,CAAxC;AACA,QAAM,CAAC6B,SAAD,EAAYC,YAAZ,IAA4B9B,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAAC+B,UAAD,EAAaC,aAAb,IAA8BhC,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACiC,YAAD,EAAeC,eAAf,IAAkClC,QAAQ,CAAC,EAAD,CAAhD,CAZuB,CAcvB;;AACA,QAAMmC,SAAS,GAAG/B,UAAU,CAACgC,KAAK,KAAK;AACnCC,IAAAA,KAAK,EAAE;AACLC,MAAAA,SAAS,EAAE,EADN;AAELC,MAAAA,YAAY,EAAE,EAFT;AAGLC,MAAAA,OAAO,EAAE;AAHJ,KAD4B;AAMnCC,IAAAA,MAAM,EAAE;AACNH,MAAAA,SAAS,EAAE,EADL;AAENC,MAAAA,YAAY,EAAE;AAFR,KAN2B;AAUnCG,IAAAA,cAAc,EAAE;AACdC,MAAAA,KAAK,EAAE,MADO;AAEd,mBAAa;AACXL,QAAAA,SAAS,EAAEF,KAAK,CAACQ,OAAN,CAAc,CAAd;AADA;AAFC,KAVmB;AAgBnCC,IAAAA,KAAK,EAAE;AACLC,MAAAA,QAAQ,EAAE,OADL;AAELC,MAAAA,QAAQ,EAAE,UAFL;AAGLC,MAAAA,GAAG,EAAE,EAHA;AAILC,MAAAA,KAAK,EAAE,EAJF;AAKLC,MAAAA,eAAe,EAAEhC,KAAK,CAACiC,OAAN,CAAcf,KAAd,KAAwB,MAAxB,GAAkCL,UAAU,KAAK,SAAf,GAA2B,SAA3B,GAAuC,SAAzE,GAAsF;AALlG;AAhB4B,GAAL,CAAN,CAA5B,CAfuB,CAyCvB;;AACA,QAAMqB,OAAO,GAAGjB,SAAS,EAAzB,CA1CuB,CA4CvB;;AACA,QAAMkB,YAAY,GAAIC,CAAD,IAAO;AAC1B;AACAA,IAAAA,CAAC,CAACC,cAAF,GAF0B,CAG1B;;AACA/B,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAE,IAAAA,iBAAiB,CAAC,KAAD,CAAjB,CAL0B,CAM1B;;AACA,QAAIP,KAAK,KAAK,EAAd,EAAkB;AAChB;AACAK,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,KAVyB,CAW1B;;;AACA,QAAIH,IAAI,KAAK,EAAb,EAAiB;AACf;AACAK,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,KAfyB,CAiB1B;;;AACA,QAAIP,KAAK,KAAK,EAAV,IAAgBE,IAAI,KAAK,EAA7B,EAAiC;AAC/B;AACAmC,MAAAA,YAAY,CAAC,OAAD,EAAU,yBAAV,CAAZ;AACD,KAHD,MAGO;AACL;AACAA,MAAAA,YAAY,CAAC,SAAD,EAAY,yBAAZ,CAAZ,CAFK,CAGL;;AACAtC,MAAAA,KAAK,CAACuC,GAAN,CAAU,OAAV,EAAmB;AACjBC,QAAAA,EAAE,EAAExD,MAAM,EADO;AAEjBiB,QAAAA,KAAK,EAAEA,KAAK,CAACwC,IAAN,EAFU;AAGjBtC,QAAAA,IAAI,EAAEA,IAAI,CAACsC,IAAL,EAHW;AAIjBhC,QAAAA,QAAQ,EAAEA,QAJO;AAKjBiC,QAAAA,SAAS,EAAE;AALM,OAAnB,EAJK,CAWL;;AACAtC,MAAAA,OAAO,CAAC,EAAD,CAAP;AACAF,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACD;AACF,GApCD,CA7CuB,CAmFvB;;;AACA,QAAMoC,YAAY,GAAG,CAACtC,KAAD,EAAQ2C,OAAR,KAAoB;AACvC;AACA7B,IAAAA,aAAa,CAACd,KAAD,CAAb,CAFuC,CAGvC;;AACAgB,IAAAA,eAAe,CAAC2B,OAAD,CAAf,CAJuC,CAKvC;;AACA/B,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAPD,CApFuB,CA6FvB;;;AACA,sBACE,QAAC,SAAD;AAAA,4BACE;AAAM,MAAA,UAAU,MAAhB;AAAiB,MAAA,YAAY,EAAC,KAA9B;AAAoC,MAAA,QAAQ,EAAEuB,YAA9C;AAAA,8BACE,QAAC,WAAD;AAAa,QAAA,SAAS,EAAED,OAAO,CAACf,KAAhC;AAAA,gCACE,QAAC,SAAD;AAAW,UAAA,KAAK,EAAC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,SAAD;AACE,UAAA,QAAQ,EAAGiB,CAAD,IAAOlC,QAAQ,CAACkC,CAAC,CAACQ,MAAF,CAASC,KAAV,CAD3B;AAEE,UAAA,KAAK,EAAE5C,KAFT;AAGE,UAAA,SAAS,EAAEiC,OAAO,CAACf,KAHrB;AAIE,UAAA,KAAK,EAAC,YAJR;AAKE,UAAA,KAAK,EAAC,SALR;AAME,UAAA,OAAO,EAAC,UANV;AAOE,UAAA,SAAS,MAPX;AAQE,UAAA,QAAQ,MARV;AASE,UAAA,KAAK,EAAEd;AATT;AAAA;AAAA;AAAA;AAAA,gBAFF,eAaE,QAAC,SAAD;AACE,UAAA,QAAQ,EAAG+B,CAAD,IAAOhC,OAAO,CAACgC,CAAC,CAACQ,MAAF,CAASC,KAAV,CAD1B;AAEE,UAAA,KAAK,EAAE1C,IAFT;AAGE,UAAA,SAAS,EAAE+B,OAAO,CAACf,KAHrB;AAIE,UAAA,KAAK,EAAC,WAJR;AAKE,UAAA,OAAO,EAAC,UALV;AAME,UAAA,KAAK,EAAC,SANR;AAOE,UAAA,SAAS,MAPX;AAQE,UAAA,IAAI,EAAE,CARR;AASE,UAAA,SAAS,MATX;AAUE,UAAA,QAAQ,MAVV;AAWE,UAAA,KAAK,EAAEZ;AAXT;AAAA;AAAA;AAAA;AAAA,gBAbF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eA4BE,QAAC,WAAD;AAAa,QAAA,SAAS,EAAE2B,OAAO,CAACf,KAAhC;AAAA,gCACE,QAAC,SAAD;AAAW,UAAA,KAAK,EAAC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,MAAD;AACE,UAAA,SAAS,MADX;AAEE,UAAA,KAAK,EAAEV,QAFT;AAGE,UAAA,QAAQ,EAAG2B,CAAD,IAAO1B,WAAW,CAAC0B,CAAC,CAACQ,MAAF,CAASC,KAAV,CAH9B;AAIE,UAAA,OAAO,EAAC,UAJV;AAKE,UAAA,SAAS,EAAEX,OAAO,CAACX,MALrB;AAAA,oBAQIvB,KAAK,CAAC8C,UAAN,CAAiBC,GAAjB,CAAqBtC,QAAQ,IAAI;AAC/B,gCACE,QAAC,QAAD;AAA4B,cAAA,KAAK,EAAEA,QAAQ,CAACuC,IAA5C;AAAA,wBAAmDvC,QAAQ,CAACuC;AAA5D,eAAevC,QAAQ,CAAC+B,EAAxB;AAAA;AAAA;AAAA;AAAA,oBADF;AAGD,WAJD;AARJ;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cA5BF,eA8CE,QAAC,MAAD;AACE,QAAA,OAAO,EAAC,WADV;AAEE,QAAA,KAAK,EAAC,SAFR;AAGE,QAAA,IAAI,EAAC,QAHP;AAIE,QAAA,OAAO,eAAE,QAAC,sBAAD;AAAA;AAAA;AAAA;AAAA,gBAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA9CF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAwDE,QAAC,KAAD;AAAO,MAAA,SAAS,EAAC,MAAjB;AAAwB,MAAA,EAAE,EAAE7B,SAA5B;AAAuC,MAAA,YAAY,MAAnD;AAAoD,MAAA,aAAa,MAAjE;AAAA,6BACE,QAAC,KAAD;AACE,QAAA,SAAS,EAAEuB,OAAO,CAACP,KADrB;AAEE,QAAA,QAAQ,EAAEd,UAFZ;AAGE,QAAA,MAAM,eACJ,QAAC,UAAD;AACE,wBAAW,OADb;AAEE,UAAA,KAAK,EAAC,SAFR;AAGE,UAAA,IAAI,EAAC,OAHP;AAIE,UAAA,OAAO,EAAE,MAAMD,YAAY,CAAC,KAAD,CAJ7B;AAAA,iCAME,QAAC,SAAD;AAAW,YAAA,QAAQ,EAAC;AAApB;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA,kBAcGG;AAdH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAxDF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6ED,CA3KD;;GAAMhB,U;;KAAAA,U;AA6KN,eAAeA,UAAf","sourcesContent":["// Libraries\nimport React, {useContext, useState} from \"react\";\nimport {v4 as uuidv4} from \"uuid\";\n\n// App Context\nimport {AppContext} from \"../contexts/AppContext\";\n\n// Material UI Components\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {\n  Button,\n  Container,\n  FormControl,\n  FormLabel,\n  IconButton,\n  MenuItem,\n  Select,\n  Slide,\n  TextField\n} from \"@material-ui/core\";\nimport {Alert} from \"@material-ui/lab\";\n\n// Material UI Icons\nimport KeyboardArrowRightIcon from \"@material-ui/icons/KeyboardArrowRight\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\n// Component\nconst CreateNote = () => {\n  // Get State\n  const state = useContext(AppContext);\n\n  // Component Local State\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [titleErrorState, setTitleErrorState] = useState(false);\n  const [bodyErrorState, setBodyErrorState] = useState(false);\n  const [category, setCategory] = useState(\"Not Categorized\");\n  const [openAlert, setOpenAlert] = useState(false);\n  const [alertState, setAlertState] = useState(\"\");\n  const [alertMessage, setAlertMessage] = useState(\"\");\n\n  // Custom CSS Classes Style\n  const useStyles = makeStyles(theme => ({\n      field: {\n        marginTop: 20,\n        marginBottom: 20,\n        display: \"block\"\n      },\n      select: {\n        marginTop: 20,\n        marginBottom: 20\n      },\n      alertContainer: {\n        width: \"100%\",\n        \"& > * + *\": {\n          marginTop: theme.spacing(2)\n        }\n      },\n      alert: {\n        maxWidth: \"300px\",\n        position: \"absolute\",\n        top: 75,\n        right: 20,\n        backgroundColor: state.profile.theme === 'dark' ? (alertState === 'success' ? '#495d49' : '#563a38') : ''\n      }\n    }\n  ));\n\n  // Classes Object\n  const classes = useStyles();\n\n  // Handle Submit Form Method\n  const handleSubmit = (e) => {\n    // Prevent Default Action For Form Submission\n    e.preventDefault();\n    // Reset Error State\n    setTitleErrorState(false);\n    setBodyErrorState(false);\n    // Check If Title Field Empty\n    if (title === \"\") {\n      // Set Title Error For Empty\n      setTitleErrorState(true);\n    }\n    // Check If Note Field Empty\n    if (body === \"\") {\n      // Set Note Error For Empty\n      setBodyErrorState(true);\n    }\n\n    // Check For Alert Errors\n    if (title === \"\" || body === \"\") {\n      // Trigger Error Alert\n      triggerAlert(\"error\", \"All Fields Are Required\");\n    } else {\n      // Trigger Success Alert\n      triggerAlert(\"success\", \"Note Saved Successfully\");\n      // Save Note To State\n      state.add(\"notes\", {\n        id: uuidv4(),\n        title: title.trim(),\n        body: body.trim(),\n        category: category,\n        favourite: false\n      });\n      // Empty Fields\n      setBody(\"\");\n      setTitle(\"\");\n    }\n  };\n\n  // Trigger Alert Method\n  const triggerAlert = (state, message) => {\n    // Set Alert State\n    setAlertState(state);\n    // Set Alert Message\n    setAlertMessage(message);\n    // Open Alert\n    setOpenAlert(true);\n  };\n\n  // Component View\n  return (\n    <Container>\n      <form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n        <FormControl className={classes.field}>\n          <FormLabel color=\"primary\">Note Details</FormLabel>\n          <TextField\n            onChange={(e) => setTitle(e.target.value)}\n            value={title}\n            className={classes.field}\n            label=\"Note Title\"\n            color=\"primary\"\n            variant=\"outlined\"\n            fullWidth\n            required\n            error={titleErrorState}\n          />\n          <TextField\n            onChange={(e) => setBody(e.target.value)}\n            value={body}\n            className={classes.field}\n            label=\"Note Body\"\n            variant=\"outlined\"\n            color=\"primary\"\n            multiline\n            rows={5}\n            fullWidth\n            required\n            error={bodyErrorState}\n          />\n        </FormControl>\n        <FormControl className={classes.field}>\n          <FormLabel color=\"primary\">Category</FormLabel>\n          <Select\n            fullWidth\n            value={category}\n            onChange={(e) => setCategory(e.target.value)}\n            variant=\"outlined\"\n            className={classes.select}\n          >\n            {\n              state.categories.map(category => {\n                return (\n                  <MenuItem key={category.id} value={category.name}>{category.name}</MenuItem>\n                );\n              })\n            }\n          </Select>\n        </FormControl>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n          endIcon={<KeyboardArrowRightIcon />}\n        >\n          Add\n        </Button>\n      </form>\n      <Slide direction=\"left\" in={openAlert} mountOnEnter unmountOnExit>\n        <Alert\n          className={classes.alert}\n          severity={alertState}\n          action={\n            <IconButton\n              aria-label=\"close\"\n              color=\"inherit\"\n              size=\"small\"\n              onClick={() => setOpenAlert(false)}\n            >\n              <CloseIcon fontSize=\"inherit\" />\n            </IconButton>\n          }\n        >\n          {alertMessage}\n        </Alert>\n      </Slide>\n    </Container>\n  );\n};\n\nexport default CreateNote;\n"]},"metadata":{},"sourceType":"module"}