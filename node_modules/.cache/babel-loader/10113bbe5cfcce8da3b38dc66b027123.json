{"ast":null,"code":"// Check Light Or Dark Method\nexport const CheckLightOrDark = color => {\n  let r, g, b, hsp;\n\n  if (color.match(/^rgb/)) {\n    color = color.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n    r = color[1];\n    g = color[2];\n    b = color[3];\n  } else {\n    color = +(\"0x\" + color.slice(1).replace(color.length < 5 && /./g, \"$&$&\"));\n    r = color >> 16;\n    g = color >> 8 & 255;\n    b = color & 255;\n  }\n\n  hsp = Math.sqrt(0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b));\n  return hsp > 150 ? \"#222222\" : \"#ffffff\";\n};\n_c = CheckLightOrDark;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckLightOrDark\");","map":{"version":3,"sources":["C:/Users/ranaa/Downloads/smart-notes-master/smart-notes-master/src/helpers/CheckLightOrDark.js"],"names":["CheckLightOrDark","color","r","g","b","hsp","match","slice","replace","length","Math","sqrt"],"mappings":"AAAA;AACA,OAAO,MAAMA,gBAAgB,GAAIC,KAAD,IAAW;AACzC,MAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAaC,GAAb;;AACA,MAAIJ,KAAK,CAACK,KAAN,CAAY,MAAZ,CAAJ,EAAyB;AACvBL,IAAAA,KAAK,GAAGA,KAAK,CAACK,KAAN,CAAY,4DAAZ,CAAR;AACAJ,IAAAA,CAAC,GAAGD,KAAK,CAAC,CAAD,CAAT;AACAE,IAAAA,CAAC,GAAGF,KAAK,CAAC,CAAD,CAAT;AACAG,IAAAA,CAAC,GAAGH,KAAK,CAAC,CAAD,CAAT;AACD,GALD,MAKO;AACLA,IAAAA,KAAK,GAAG,EAAE,OAAOA,KAAK,CAACM,KAAN,CAAY,CAAZ,EAAeC,OAAf,CACbP,KAAK,CAACQ,MAAN,GAAe,CAAf,IAAoB,IADP,EACa,MADb,CAAT,CAAR;AAIAP,IAAAA,CAAC,GAAGD,KAAK,IAAI,EAAb;AACAE,IAAAA,CAAC,GAAGF,KAAK,IAAI,CAAT,GAAa,GAAjB;AACAG,IAAAA,CAAC,GAAGH,KAAK,GAAG,GAAZ;AACD;;AACDI,EAAAA,GAAG,GAAGK,IAAI,CAACC,IAAL,CACJ,SAAST,CAAC,GAAGA,CAAb,IACA,SAASC,CAAC,GAAGA,CAAb,CADA,GAEA,SAASC,CAAC,GAAGA,CAAb,CAHI,CAAN;AAKA,SAAOC,GAAG,GAAG,GAAN,GAAY,SAAZ,GAAwB,SAA/B;AACD,CAtBM;KAAML,gB","sourcesContent":["// Check Light Or Dark Method\nexport const CheckLightOrDark = (color) => {\n  let r, g, b, hsp;\n  if (color.match(/^rgb/)) {\n    color = color.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n    r = color[1];\n    g = color[2];\n    b = color[3];\n  } else {\n    color = +(\"0x\" + color.slice(1).replace(\n        color.length < 5 && /./g, \"$&$&\"\n      )\n    );\n    r = color >> 16;\n    g = color >> 8 & 255;\n    b = color & 255;\n  }\n  hsp = Math.sqrt(\n    0.299 * (r * r) +\n    0.587 * (g * g) +\n    0.114 * (b * b)\n  );\n  return hsp > 150 ? \"#222222\" : \"#ffffff\";\n};\n"]},"metadata":{},"sourceType":"module"}