{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ranaa\\\\Downloads\\\\smart-notes-master\\\\smart-notes-master\\\\src\\\\pages\\\\UpdateNote.js\",\n    _s = $RefreshSig$();\n\n// Libraries\nimport React, { useContext, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\"; // App Context\n\nimport { AppContext } from \"../contexts/AppContext\"; // Material UI Components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button, Container, FormControl, FormLabel, IconButton, MenuItem, Select, Slide, TextField, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\"; // Material UI Icons\n\nimport KeyboardArrowRightIcon from \"@material-ui/icons/KeyboardArrowRight\";\nimport CloseIcon from \"@material-ui/icons/Close\"; // Component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UpdateNote = () => {\n  _s();\n\n  // Location Hook\n  const location = useLocation(); // Get State\n\n  const state = useContext(AppContext); // Get Note Attributes With ID From URL\n\n  let currentNote = null;\n  state.notes.map(note => {\n    return note.id === location.pathname.split(\"/\", 3)[2] ? currentNote = note : null;\n  }); // Component Local State\n\n  const [title, setTitle] = useState(currentNote !== null ? currentNote.title : \"\");\n  const [body, setBody] = useState(currentNote !== null ? currentNote.body : \"\");\n  const [titleErrorState, setTitleErrorState] = useState(false);\n  const [bodyErrorState, setBodyErrorState] = useState(false);\n  const [category, setCategory] = useState(currentNote !== null ? currentNote.category : \"\");\n  const [openAlert, setOpenAlert] = useState(false);\n  const [alertState, setAlertState] = useState(\"\");\n  const [alertMessage, setAlertMessage] = useState(\"\"); // Custom CSS Classes Style\n\n  const useStyles = makeStyles(theme => ({\n    field: {\n      marginTop: 20,\n      marginBottom: 20,\n      display: \"block\"\n    },\n    select: {\n      marginTop: 20,\n      marginBottom: 20\n    },\n    alertContainer: {\n      width: \"100%\",\n      \"& > * + *\": {\n        marginTop: theme.spacing(2)\n      }\n    },\n    alert: {\n      maxWidth: \"300px\",\n      position: \"absolute\",\n      top: 75,\n      right: 20,\n      backgroundColor: state.profile.theme === 'dark' ? alertState === 'success' ? '#495d49' : '#563a38' : ''\n    },\n    EmptyMessage: {\n      textAlign: \"center\",\n      color: state.profile.theme === 'light' ? \"#c1c1c1\" : \"#606060\",\n      marginTop: \"calc((100vh - 65px) / 2)\",\n      transform: \"translateY(-50%)\"\n    }\n  })); // Classes Object\n\n  const classes = useStyles();\n\n  if (currentNote !== null) {\n    // Handle Submit Form Method\n    const handleSubmit = e => {\n      // Prevent Default Action For Form Submission\n      e.preventDefault(); // Reset Error State\n\n      setTitleErrorState(false);\n      setBodyErrorState(false); // Check If Title Field Empty\n\n      if (title === \"\") {\n        // Set Title Error For Empty\n        setTitleErrorState(true);\n      } // Check If Note Field Empty\n\n\n      if (body === \"\") {\n        // Set Note Error For Empty\n        setBodyErrorState(true);\n      } // Check For Alert Errors\n\n\n      if (title === \"\" || body === \"\") {\n        // Trigger Error Alert\n        triggerAlert(\"error\", \"All Fields Are Required\");\n      } else {\n        // Trigger Success Alert\n        triggerAlert(\"success\", \"Note Edited Successfully\"); // Save Note To State\n\n        state.update(\"notes\", {\n          id: currentNote.id,\n          title: title,\n          body: body,\n          category: category,\n          favourite: currentNote.favourite\n        });\n      }\n    }; // Trigger Alert Method\n\n\n    const triggerAlert = (state, message) => {\n      // Set Alert State\n      setAlertState(state); // Set Alert Message\n\n      setAlertMessage(message); // Open Alert\n\n      setOpenAlert(true);\n    };\n\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        noValidate: true,\n        autoComplete: \"off\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(FormControl, {\n          className: classes.field,\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            color: \"primary\",\n            children: \"Note Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            onChange: e => setTitle(e.target.value),\n            value: title,\n            className: classes.field,\n            label: \"Note Title\",\n            color: \"primary\",\n            variant: \"outlined\",\n            fullWidth: true,\n            required: true,\n            error: titleErrorState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            onChange: e => setBody(e.target.value),\n            value: body,\n            className: classes.field,\n            label: \"Note Body\",\n            variant: \"outlined\",\n            color: \"primary\",\n            multiline: true,\n            rows: 5,\n            fullWidth: true,\n            required: true,\n            error: bodyErrorState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          className: classes.field,\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            color: \"primary\",\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            fullWidth: true,\n            value: category,\n            onChange: e => setCategory(e.target.value),\n            variant: \"outlined\",\n            className: classes.select,\n            children: state.categories.map(category => {\n              return /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: category.name,\n                children: category.name\n              }, category.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          type: \"submit\",\n          endIcon: /*#__PURE__*/_jsxDEV(KeyboardArrowRightIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 22\n          }, this),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slide, {\n        direction: \"left\",\n        in: openAlert,\n        mountOnEnter: true,\n        unmountOnExit: true,\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          className: classes.alert,\n          severity: alertState,\n          action: /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"close\",\n            color: \"inherit\",\n            size: \"small\",\n            onClick: () => setOpenAlert(false),\n            children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n              fontSize: \"inherit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }, this),\n          children: alertMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      component: \"h2\",\n      className: classes.EmptyMessage,\n      children: \"No Note With This ID (Stop Playing)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this);\n  }\n}; // Export Component\n\n\n_s(UpdateNote, \"hl3omMz5veazswHa6DBP/ABMZnM=\", true, function () {\n  return [useLocation];\n});\n\n_c = UpdateNote;\nexport default UpdateNote;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateNote\");","map":{"version":3,"sources":["C:/Users/ranaa/Downloads/smart-notes-master/smart-notes-master/src/pages/UpdateNote.js"],"names":["React","useContext","useState","useLocation","AppContext","makeStyles","Button","Container","FormControl","FormLabel","IconButton","MenuItem","Select","Slide","TextField","Typography","Alert","KeyboardArrowRightIcon","CloseIcon","UpdateNote","location","state","currentNote","notes","map","note","id","pathname","split","title","setTitle","body","setBody","titleErrorState","setTitleErrorState","bodyErrorState","setBodyErrorState","category","setCategory","openAlert","setOpenAlert","alertState","setAlertState","alertMessage","setAlertMessage","useStyles","theme","field","marginTop","marginBottom","display","select","alertContainer","width","spacing","alert","maxWidth","position","top","right","backgroundColor","profile","EmptyMessage","textAlign","color","transform","classes","handleSubmit","e","preventDefault","triggerAlert","update","favourite","message","target","value","categories","name"],"mappings":"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","sourcesContent":["// Libraries\nimport React, {useContext, useState} from \"react\";\nimport {useLocation} from \"react-router-dom\";\n\n// App Context\nimport {AppContext} from \"../contexts/AppContext\";\n\n// Material UI Components\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {\n  Button,\n  Container,\n  FormControl,\n  FormLabel,\n  IconButton,\n  MenuItem,\n  Select,\n  Slide,\n  TextField,\n  Typography\n} from \"@material-ui/core\";\nimport {Alert} from \"@material-ui/lab\";\n\n// Material UI Icons\nimport KeyboardArrowRightIcon from \"@material-ui/icons/KeyboardArrowRight\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\n// Component\nconst UpdateNote = () => {\n  // Location Hook\n  const location = useLocation();\n\n  // Get State\n  const state = useContext(AppContext);\n\n  // Get Note Attributes With ID From URL\n  let currentNote = null;\n  state.notes.map(note => {\n    return note.id === location.pathname.split(\"/\", 3)[2] ? (currentNote = note) : null;\n  });\n\n  // Component Local State\n  const [title, setTitle] = useState(currentNote !== null ? currentNote.title : \"\");\n  const [body, setBody] = useState(currentNote !== null ? currentNote.body : \"\");\n  const [titleErrorState, setTitleErrorState] = useState(false);\n  const [bodyErrorState, setBodyErrorState] = useState(false);\n  const [category, setCategory] = useState(currentNote !== null ? currentNote.category : \"\");\n  const [openAlert, setOpenAlert] = useState(false);\n  const [alertState, setAlertState] = useState(\"\");\n  const [alertMessage, setAlertMessage] = useState(\"\");\n\n  // Custom CSS Classes Style\n  const useStyles = makeStyles(theme => ({\n      field: {\n        marginTop: 20,\n        marginBottom: 20,\n        display: \"block\"\n      },\n      select: {\n        marginTop: 20,\n        marginBottom: 20\n      },\n      alertContainer: {\n        width: \"100%\",\n        \"& > * + *\": {\n          marginTop: theme.spacing(2)\n        }\n      },\n      alert: {\n        maxWidth: \"300px\",\n        position: \"absolute\",\n        top: 75,\n        right: 20,\n        backgroundColor: state.profile.theme === 'dark' ? (alertState === 'success' ? '#495d49' : '#563a38') : ''\n      },\n      EmptyMessage: {\n        textAlign: \"center\",\n        color: state.profile.theme === 'light' ? \"#c1c1c1\" : \"#606060\",\n        marginTop: \"calc((100vh - 65px) / 2)\",\n        transform: \"translateY(-50%)\"\n      }\n    }\n  ));\n\n  // Classes Object\n  const classes = useStyles();\n\n  if (currentNote !== null) {\n    // Handle Submit Form Method\n    const handleSubmit = (e) => {\n      // Prevent Default Action For Form Submission\n      e.preventDefault();\n      // Reset Error State\n      setTitleErrorState(false);\n      setBodyErrorState(false);\n      // Check If Title Field Empty\n      if (title === \"\") {\n        // Set Title Error For Empty\n        setTitleErrorState(true);\n      }\n      // Check If Note Field Empty\n      if (body === \"\") {\n        // Set Note Error For Empty\n        setBodyErrorState(true);\n      }\n\n      // Check For Alert Errors\n      if (title === \"\" || body === \"\") {\n        // Trigger Error Alert\n        triggerAlert(\"error\", \"All Fields Are Required\");\n      } else {\n        // Trigger Success Alert\n        triggerAlert(\"success\", \"Note Edited Successfully\");\n        // Save Note To State\n        state.update(\"notes\", {\n          id: currentNote.id,\n          title: title,\n          body: body,\n          category: category,\n          favourite: currentNote.favourite\n        });\n      }\n    };\n\n    // Trigger Alert Method\n    const triggerAlert = (state, message) => {\n      // Set Alert State\n      setAlertState(state);\n      // Set Alert Message\n      setAlertMessage(message);\n      // Open Alert\n      setOpenAlert(true);\n    };\n\n    return (\n      <Container>\n        <form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n          <FormControl className={classes.field}>\n            <FormLabel color=\"primary\">Note Details</FormLabel>\n            <TextField\n              onChange={(e) => setTitle(e.target.value)}\n              value={title}\n              className={classes.field}\n              label=\"Note Title\"\n              color=\"primary\"\n              variant=\"outlined\"\n              fullWidth\n              required\n              error={titleErrorState}\n            />\n            <TextField\n              onChange={(e) => setBody(e.target.value)}\n              value={body}\n              className={classes.field}\n              label=\"Note Body\"\n              variant=\"outlined\"\n              color=\"primary\"\n              multiline\n              rows={5}\n              fullWidth\n              required\n              error={bodyErrorState}\n            />\n          </FormControl>\n          <FormControl className={classes.field}>\n            <FormLabel color=\"primary\">Category</FormLabel>\n            <Select\n              fullWidth\n              value={category}\n              onChange={(e) => setCategory(e.target.value)}\n              variant=\"outlined\"\n              className={classes.select}\n            >\n              {\n                state.categories.map(category => {\n                  return (\n                    <MenuItem key={category.id} value={category.name}>{category.name}</MenuItem>\n                  );\n                })\n              }\n            </Select>\n          </FormControl>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            endIcon={<KeyboardArrowRightIcon />}\n          >\n            Edit\n          </Button>\n        </form>\n        <Slide direction=\"left\" in={openAlert} mountOnEnter unmountOnExit>\n          <Alert\n            className={classes.alert}\n            severity={alertState}\n            action={\n              <IconButton\n                aria-label=\"close\"\n                color=\"inherit\"\n                size=\"small\"\n                onClick={() => setOpenAlert(false)}\n              >\n                <CloseIcon fontSize=\"inherit\" />\n              </IconButton>\n            }\n          >\n            {alertMessage}\n          </Alert>\n        </Slide>\n      </Container>\n    );\n  } else {\n    return (\n      <Typography variant=\"h5\"\n                  component=\"h2\"\n                  className={classes.EmptyMessage}\n      >\n        No Note With This ID (Stop Playing)\n      </Typography>\n    );\n  }\n};\n\n// Export Component\nexport default UpdateNote;\n"]},"metadata":{},"sourceType":"module"}